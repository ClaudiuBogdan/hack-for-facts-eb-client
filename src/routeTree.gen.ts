/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as EntitiesCuiImport } from './routes/entities.$cui'

// Create Virtual Routes

const MapLazyImport = createFileRoute('/map')()
const IndexLazyImport = createFileRoute('/')()
const DataDiscoveryIndexLazyImport = createFileRoute('/data-discovery/')()
const AnomaliesIndexLazyImport = createFileRoute('/anomalies/')()
const AnomaliesAnomalyIdLazyImport = createFileRoute('/anomalies/$anomalyId')()

// Create/Update Routes

const MapLazyRoute = MapLazyImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/map.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DataDiscoveryIndexLazyRoute = DataDiscoveryIndexLazyImport.update({
  id: '/data-discovery/',
  path: '/data-discovery/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/data-discovery/index.lazy').then((d) => d.Route),
)

const AnomaliesIndexLazyRoute = AnomaliesIndexLazyImport.update({
  id: '/anomalies/',
  path: '/anomalies/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/anomalies/index.lazy').then((d) => d.Route),
)

const AnomaliesAnomalyIdLazyRoute = AnomaliesAnomalyIdLazyImport.update({
  id: '/anomalies/$anomalyId',
  path: '/anomalies/$anomalyId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/anomalies/$anomalyId.lazy').then((d) => d.Route),
)

const EntitiesCuiRoute = EntitiesCuiImport.update({
  id: '/entities/$cui',
  path: '/entities/$cui',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapLazyImport
      parentRoute: typeof rootRoute
    }
    '/entities/$cui': {
      id: '/entities/$cui'
      path: '/entities/$cui'
      fullPath: '/entities/$cui'
      preLoaderRoute: typeof EntitiesCuiImport
      parentRoute: typeof rootRoute
    }
    '/anomalies/$anomalyId': {
      id: '/anomalies/$anomalyId'
      path: '/anomalies/$anomalyId'
      fullPath: '/anomalies/$anomalyId'
      preLoaderRoute: typeof AnomaliesAnomalyIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/anomalies/': {
      id: '/anomalies/'
      path: '/anomalies'
      fullPath: '/anomalies'
      preLoaderRoute: typeof AnomaliesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/data-discovery/': {
      id: '/data-discovery/'
      path: '/data-discovery'
      fullPath: '/data-discovery'
      preLoaderRoute: typeof DataDiscoveryIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/map': typeof MapLazyRoute
  '/entities/$cui': typeof EntitiesCuiRoute
  '/anomalies/$anomalyId': typeof AnomaliesAnomalyIdLazyRoute
  '/anomalies': typeof AnomaliesIndexLazyRoute
  '/data-discovery': typeof DataDiscoveryIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/map': typeof MapLazyRoute
  '/entities/$cui': typeof EntitiesCuiRoute
  '/anomalies/$anomalyId': typeof AnomaliesAnomalyIdLazyRoute
  '/anomalies': typeof AnomaliesIndexLazyRoute
  '/data-discovery': typeof DataDiscoveryIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/map': typeof MapLazyRoute
  '/entities/$cui': typeof EntitiesCuiRoute
  '/anomalies/$anomalyId': typeof AnomaliesAnomalyIdLazyRoute
  '/anomalies/': typeof AnomaliesIndexLazyRoute
  '/data-discovery/': typeof DataDiscoveryIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/map'
    | '/entities/$cui'
    | '/anomalies/$anomalyId'
    | '/anomalies'
    | '/data-discovery'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/map'
    | '/entities/$cui'
    | '/anomalies/$anomalyId'
    | '/anomalies'
    | '/data-discovery'
  id:
    | '__root__'
    | '/'
    | '/map'
    | '/entities/$cui'
    | '/anomalies/$anomalyId'
    | '/anomalies/'
    | '/data-discovery/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  MapLazyRoute: typeof MapLazyRoute
  EntitiesCuiRoute: typeof EntitiesCuiRoute
  AnomaliesAnomalyIdLazyRoute: typeof AnomaliesAnomalyIdLazyRoute
  AnomaliesIndexLazyRoute: typeof AnomaliesIndexLazyRoute
  DataDiscoveryIndexLazyRoute: typeof DataDiscoveryIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MapLazyRoute: MapLazyRoute,
  EntitiesCuiRoute: EntitiesCuiRoute,
  AnomaliesAnomalyIdLazyRoute: AnomaliesAnomalyIdLazyRoute,
  AnomaliesIndexLazyRoute: AnomaliesIndexLazyRoute,
  DataDiscoveryIndexLazyRoute: DataDiscoveryIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/map",
        "/entities/$cui",
        "/anomalies/$anomalyId",
        "/anomalies/",
        "/data-discovery/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/map": {
      "filePath": "map.lazy.tsx"
    },
    "/entities/$cui": {
      "filePath": "entities.$cui.tsx"
    },
    "/anomalies/$anomalyId": {
      "filePath": "anomalies/$anomalyId.lazy.tsx"
    },
    "/anomalies/": {
      "filePath": "anomalies/index.lazy.tsx"
    },
    "/data-discovery/": {
      "filePath": "data-discovery/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
